{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","Component","constructor","props","super","this","handleClick","bind","evt","flipCellsAroundMe","coord","render","classes","isLit","className","onClick","Board","state","hasWon","board","createBoard","flipCellsAround","Array","nrows","i","length","ncols","j","Math","random","chanceLightStartsOn","split","map","Number","y","x","flipCell","every","col","cell","console","log","setState","tblBoard","row","push","key","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAgBA,MAAMA,UAAaC,YACfC,YAAYC,GACRC,MAAMD,GACNE,KAAKC,YAAcD,KAAKC,YAAYC,KAAKF,MAG7CC,YAAYE,GAERH,KAAKF,MAAMM,kBAAkBJ,KAAKF,MAAMO,OAG5CC,SACI,IAAIC,EAAU,QAAUP,KAAKF,MAAMU,MAAQ,YAAc,IAEzD,OAAO,wBAAIC,UAAWF,EAASG,QAASV,KAAKC,eAItCN,Q,MCJf,MAAMgB,UAAcf,YAChBC,YAAYC,GACRC,MAAMD,GAENE,KAAKY,MAAQ,CACTC,QAAQ,EACRC,MAAOd,KAAKe,eAEhBf,KAAKgB,gBAAkBhB,KAAKgB,gBAAgBd,KAAKF,MASrDe,cACI,IAAID,EAAQ,IAAIG,MAAMjB,KAAKF,MAAMoB,OACjC,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAMM,SAAUD,EAAG,CACnCL,EAAMK,GAAK,IAAIF,MAAMjB,KAAKF,MAAMuB,OAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAMK,GAAGC,SAAUE,EACnCR,EAAMK,GAAGG,GACLC,KAAKC,SAAWxB,KAAKF,MAAM2B,oBAGvC,OAAOX,EAKXE,gBAAgBX,GAAQ,IAAD,EACIL,KAAKF,MAAtBuB,EADa,EACbA,MAAOH,EADM,EACNA,MACTJ,EAAQd,KAAKY,MAAME,MAFJ,EAGJT,EAAMqB,MAAM,KAAKC,IAAIC,QAHjB,mBAGbC,EAHa,KAGVC,EAHU,KAInB,SAASC,EAASF,EAAGC,GAEbA,GAAK,GAAKA,EAAIT,GAASQ,GAAK,GAAKA,EAAIX,IACrCJ,EAAMe,GAAGC,IAAMhB,EAAMe,GAAGC,IAGhCC,EAASF,EAAGC,GACZC,EAASF,EAAI,EAAGC,GAChBC,EAASF,EAAGC,EAAI,GAChBC,EAASF,EAAI,EAAGC,GAChBC,EAASF,EAAGC,EAAI,GAMhB,IAAIjB,EAASC,EAAMkB,MAAMC,GAAOA,EAAID,MAAME,IAASA,IAQnDC,QAAQC,IAAIvB,GACZb,KAAKqC,SAAS,CAAEvB,QAAOD,WAK3BP,SACI,IAAIgC,EAAW,GACf,IAAK,IAAIT,EAAI,EAAGA,EAAI7B,KAAKF,MAAMoB,QAASW,EAAG,CACvC,IAAIU,EAAM,GACV,IAAK,IAAIT,EAAI,EAAGA,EAAI9B,KAAKF,MAAMuB,QAASS,EAAG,CACvC,IAAIzB,EAAK,UAAMwB,EAAN,YAAWC,GACpBS,EAAIC,KACA,kBAAC,EAAD,CACIC,IAAKpC,EACLA,MAAOA,EACPG,MAAOR,KAAKY,MAAME,MAAMe,GAAGC,GAC3B1B,kBAAmBJ,KAAKgB,mBAIpCsB,EAASE,KAAK,wBAAIC,IAAKZ,GAAIU,IAG/B,OACI,6BACI,yBAAK9B,UAAU,eACX,yBAAKA,UAAU,eAAf,UACA,yBAAKA,UAAU,aAAf,QAEHT,KAAKY,MAAMC,OACR,yBAAKJ,UAAU,UACX,0BAAMA,UAAU,eAAhB,OACA,0BAAMA,UAAU,aAAhB,SAGJ,2BAAOA,UAAU,SACb,+BAAQ6B,MAhG1B3B,EAWK+B,aAAe,CAClBxB,MAAO,EACPG,MAAO,EACPI,oBAAqB,IA0Fdd,Q,MChIf,MAAMgC,UAAY/C,YAChBU,SACE,OACE,yBAAKG,UAAU,OACb,kBAAC,EAAD,QAMOkC,QCJKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS3C,OAAO,kBAAC,EAAD,MAAS4C,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,iB","file":"static/js/main.328af889.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Cell.css';\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick(evt) {\n        // call up to the board to flip cells around this cell\n        this.props.flipCellsAroundMe(this.props.coord);\n    }\n\n    render() {\n        let classes = 'Cell' + (this.props.isLit ? ' Cell-lit' : '');\n\n        return <td className={classes} onClick={this.handleClick} />;\n    }\n}\n\nexport default Cell;\n","import React, { Component } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            hasWon: false,\n            board: this.createBoard()\n        };\n        this.flipCellsAround = this.flipCellsAround.bind(this);\n    }\n\n    static defaultProps = {\n        nrows: 5,\n        ncols: 5,\n        chanceLightStartsOn: 0.5\n    };\n\n    createBoard() {\n        let board = new Array(this.props.nrows);\n        for (let i = 0; i < board.length; ++i) {\n            board[i] = new Array(this.props.ncols);\n            for (let j = 0; j < board[i].length; ++j) {\n                board[i][j] =\n                    Math.random() < this.props.chanceLightStartsOn;\n            }\n        }\n        return board;\n    }\n\n    /** handle changing a cell: update board & determine if winner */\n\n    flipCellsAround(coord) {\n        let { ncols, nrows } = this.props;\n        let board = this.state.board;\n        let [ y, x ] = coord.split('-').map(Number);\n        function flipCell(y, x) {\n            // if this coord is actually on board, flip it\n            if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n                board[y][x] = !board[y][x];\n            }\n        }\n        flipCell(y, x);\n        flipCell(y - 1, x);\n        flipCell(y, x - 1);\n        flipCell(y + 1, x);\n        flipCell(y, x + 1);\n\n        // TODO: flip this cell and the cells around it\n        // win when every cell is turned off\n        // TODO: determine is the game has been won\n\n        let hasWon = board.every(col => col.every(cell => !cell));\n        //let win = [];\n        // for (let y = 0; y < this.props.nrows; ++y) {\n        //     for (let x = 0; x < this.props.ncols; ++x) {\n        //         win.push(board[y][x]);\n        //     }\n        // }\n        // hasWon = win.every(val => val === false);\n        console.log(hasWon);\n        this.setState({ board, hasWon });\n    }\n\n    /** Render game board or winning message. */\n\n    render() {\n        let tblBoard = [];\n        for (let y = 0; y < this.props.nrows; ++y) {\n            let row = [];\n            for (let x = 0; x < this.props.ncols; ++x) {\n                let coord = `${y}-${x}`;\n                row.push(\n                    <Cell\n                        key={coord}\n                        coord={coord}\n                        isLit={this.state.board[y][x]}\n                        flipCellsAroundMe={this.flipCellsAround}\n                    />\n                );\n            }\n            tblBoard.push(<tr key={y}>{row}</tr>);\n        }\n\n        return (\n            <div>\n                <div className=\"Board-title\">\n                    <div className=\"neon-orange\">Lights</div>\n                    <div className=\"neon-blue\">Out</div>\n                </div>\n                {this.state.hasWon ? (\n                    <div className=\"winner\">\n                        <span className=\"neon-orange\">YOU</span>\n                        <span className=\"neon-blue\">WIN!</span>\n                    </div>\n                ) : (\n                    <table className=\"Board\">\n                        <tbody>{tblBoard}</tbody>\n                    </table>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}